// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamBatchDelArgs IPAM release IPs information
//
// swagger:model IpamBatchDelArgs
type IpamBatchDelArgs struct {

	// container ID
	// Required: true
	ContainerID *string `json:"containerID"`

	// ips
	// Required: true
	Ips []*IPConfig `json:"ips"`

	// is release conflict i ps
	IsReleaseConflictIPs bool `json:"isReleaseConflictIPs,omitempty"`

	// net namespace
	NetNamespace string `json:"netNamespace,omitempty"`

	// pod name
	// Required: true
	PodName *string `json:"podName"`

	// pod namespace
	// Required: true
	PodNamespace *string `json:"podNamespace"`

	// pod UID
	// Required: true
	PodUID *string `json:"podUID"`
}

// Validate validates this ipam batch del args
func (m *IpamBatchDelArgs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamBatchDelArgs) validateContainerID(formats strfmt.Registry) error {

	if err := validate.Required("containerID", "body", m.ContainerID); err != nil {
		return err
	}

	return nil
}

func (m *IpamBatchDelArgs) validateIps(formats strfmt.Registry) error {

	if err := validate.Required("ips", "body", m.Ips); err != nil {
		return err
	}

	for i := 0; i < len(m.Ips); i++ {
		if swag.IsZero(m.Ips[i]) { // not required
			continue
		}

		if m.Ips[i] != nil {
			if err := m.Ips[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ips" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IpamBatchDelArgs) validatePodName(formats strfmt.Registry) error {

	if err := validate.Required("podName", "body", m.PodName); err != nil {
		return err
	}

	return nil
}

func (m *IpamBatchDelArgs) validatePodNamespace(formats strfmt.Registry) error {

	if err := validate.Required("podNamespace", "body", m.PodNamespace); err != nil {
		return err
	}

	return nil
}

func (m *IpamBatchDelArgs) validatePodUID(formats strfmt.Registry) error {

	if err := validate.Required("podUID", "body", m.PodUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ipam batch del args based on the context it is used
func (m *IpamBatchDelArgs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamBatchDelArgs) contextValidateIps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ips); i++ {

		if m.Ips[i] != nil {
			if err := m.Ips[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ips" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamBatchDelArgs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamBatchDelArgs) UnmarshalBinary(b []byte) error {
	var res IpamBatchDelArgs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
